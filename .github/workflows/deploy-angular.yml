name: Deploy Angular to GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    name: Build & Run Unit Test
    runs-on: ubuntu-latest
    outputs:
      node_modules: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Node.js Install
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Dependencies install
        run: npm install

      - name: Run unit tests
        run: npm test

  build_and_e2e_tests:
    name: Build & Run e2e Tests
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore Node modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Generate config.json
        run: |
          echo '{
            "API_URL": "${{ vars.API_URL }}",
            "GITHUB_TOKEN": "${{ secrets.GH_ACCESS_TOKEN }}"
          }' > src/assets/config.json

      - name: Install Cypress Binary
        run: npx cypress install --force

      - name: Run Cypress tests
        run: npm run cypress:run

      - name: Upload Cypress screenshots (if tests fail)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots

  verify-terraform:
    name: Terraform Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infra

      - name: Terraform Plan
        id: plan
        run: terraform plan
        working-directory: ./infra

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: ./infra

      - name: Export Terraform Outputs
        run: terraform output -json > terraform-output.json
        working-directory: ./infra

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-output
          path: ./infra/terraform-output.json

  deploy:
    name: Deploy s3
    runs-on: ubuntu-latest
    needs: [build_and_e2e_tests, verify-terraform]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore Node modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Generate config.json
        run: |
          echo '{
            "API_URL": "${{ vars.API_URL }}",
            "GITHUB_TOKEN": "${{ secrets.GH_ACCESS_TOKEN }}"
          }' > src/assets/config.json

      - name: Build angular project
        run: npm run build -- --base-href="/"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-output
          path: ./infra

      - name: Extract S3 Bucket Name
        run: echo "BUCKET_NAME=$(jq -r '.bucket_name.value' ./infra/terraform-output.json | cut -d'/' -f3)" >> $GITHUB_ENV

      - name: Deploy to S3
        run: |
          aws s3 sync dist/${{ github.event.repository.name }}/browser s3://$BUCKET_NAME --delete --acl public-read

      - name: Extract Website URL
        run: echo "WEBSITE_URL=$(jq -r '.website_url.value' ./infra/terraform-output.json)" >> $GITHUB_ENV

      - name: Show Website URL
        run: echo "::notice title=Deploy URL::http://$WEBSITE_URL"

      - name: Show Website URL in Job Summary
        run: |
          echo "## âœ… Application Deployed Successfully ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ðŸ”— Website:** [Github FRT](http://$WEBSITE_URL)" >> $GITHUB_STEP_SUMMARY

